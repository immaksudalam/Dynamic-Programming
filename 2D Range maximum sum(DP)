// UVa 108 - Maximum Sum:

#include <bits/stdc++.h>
using namespace std;
int main()
{
    int n; cin>>n;
    int arr[n][n];
    int maxSubRect = -127*100*100; // lowest possible value for this problem.

    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            cin>>arr[i][j];
            if(i>0) arr[i][j]+= arr[i-1][j]; // if possible, add from top.
            if(j>0) arr[i][j]+= arr[i][j-1]; // if possible, add from left.
            if(i>0 && j>0) arr[i][j]-= arr[i-1][j-1]; // avoid double count.
                                                     // inclusion-exclusion principle.

        }
    }
    int subRect;
    for(int i=0; i<n; i++)
        for(int j=0; j<n; j++)
         for(int k=i; k<n; k++)
           for(int l=j; l<n; l++){
               subRect = arr[k][l];
               if(i>0) subRect -= arr[i-1][l];
               if(j>0) subRect -= arr[k][j-1];
               if(i>0 && j>0) subRect += arr[i-1][j-1];
               maxSubRect = max(maxSubRect, subRect);
            }
    cout<<maxSubRect<<endl;
}
